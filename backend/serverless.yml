service: udacity-capstone

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function


provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}

  tracing:
    lambda: true
    apiGateway: true

  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"

  environment:
    AUTH_0_JWKS_URL: https://dev-qqhc4z-0.eu.auth0.com/.well-known/jwks.json
    RATINGS_TABLE: Ratings-${self:provider.stage}
    RATINGS_INDEX: RatingsIndex
    SIGNED_URL_EXPIRATION: 300
    IMAGES_S3_BUCKET: how-sls-ratings-images-${self:provider.stage}



# ---------------------------------------------------------------------


functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetRatings:
    handler: src/lambda/http/getRatings.handler
    iamRoleStatementsInherit: true
    events:
      - http:
          method: get
          authorizer: Auth
          cors: true
          path: ratings
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RATINGS_TABLE}/index/${self:provider.environment.RATINGS_INDEX}

  CreateRatings:
    handler: src/lambda/http/createRating.handler
    iamRoleStatementsInherit: true
    events:
      - http:
          method: post
          authorizer: Auth
          cors: true
          path: ratings
          # request:
          #   schema:
          #     application/json: ${file(models/create-rating-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RATINGS_TABLE}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    iamRoleStatementsInherit: true
    events:
      - http:
          method: post
          authorizer: Auth
          cors: true
          path: ratings/{ratingId}/attachment
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RATINGS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*

  DeleteRating:
    handler: src/lambda/http/deleteRating.handler
    iamRoleStatementsInherit: true
    events:
      - http:
          method: delete
          authorizer: Auth
          cors: true
          path: ratings/{ratingId}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RATINGS_TABLE}

  UpdateRating:
    handler: src/lambda/http/updateRating.handler
    iamRoleStatementsInherit: true
    events:
      - http:
          method: patch
          authorizer: Auth
          cors: true
          path: ratings/{ratingId}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RATINGS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*


# ---------------------------------------------------------------------


resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RatingsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId  #partitiion key
            AttributeType: S
          - AttributeName: createdAt  #sortKey
            AttributeType: S
          - AttributeName: ratingId  #indexKey
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: ratingId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.RATINGS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.RATINGS_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
  
    RatingsImageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    
    RatingsImageBucketReadPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref RatingsImageBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
              Condition:
                StringLike:
                  "aws:Referer": "http://localhost:3000/*"
